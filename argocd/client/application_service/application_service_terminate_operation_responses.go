// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/stefanmcshane/go-argocd/argocd/models"
)

// ApplicationServiceTerminateOperationReader is a Reader for the ApplicationServiceTerminateOperation structure.
type ApplicationServiceTerminateOperationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplicationServiceTerminateOperationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplicationServiceTerminateOperationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewApplicationServiceTerminateOperationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewApplicationServiceTerminateOperationOK creates a ApplicationServiceTerminateOperationOK with default headers values
func NewApplicationServiceTerminateOperationOK() *ApplicationServiceTerminateOperationOK {
	return &ApplicationServiceTerminateOperationOK{}
}

/* ApplicationServiceTerminateOperationOK describes a response with status code 200, with default header values.

A successful response.
*/
type ApplicationServiceTerminateOperationOK struct {
	Payload models.ApplicationOperationTerminateResponse
}

// IsSuccess returns true when this application service terminate operation o k response has a 2xx status code
func (o *ApplicationServiceTerminateOperationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this application service terminate operation o k response has a 3xx status code
func (o *ApplicationServiceTerminateOperationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this application service terminate operation o k response has a 4xx status code
func (o *ApplicationServiceTerminateOperationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this application service terminate operation o k response has a 5xx status code
func (o *ApplicationServiceTerminateOperationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this application service terminate operation o k response a status code equal to that given
func (o *ApplicationServiceTerminateOperationOK) IsCode(code int) bool {
	return code == 200
}

func (o *ApplicationServiceTerminateOperationOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/applications/{name}/operation][%d] applicationServiceTerminateOperationOK  %+v", 200, o.Payload)
}

func (o *ApplicationServiceTerminateOperationOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/applications/{name}/operation][%d] applicationServiceTerminateOperationOK  %+v", 200, o.Payload)
}

func (o *ApplicationServiceTerminateOperationOK) GetPayload() models.ApplicationOperationTerminateResponse {
	return o.Payload
}

func (o *ApplicationServiceTerminateOperationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplicationServiceTerminateOperationDefault creates a ApplicationServiceTerminateOperationDefault with default headers values
func NewApplicationServiceTerminateOperationDefault(code int) *ApplicationServiceTerminateOperationDefault {
	return &ApplicationServiceTerminateOperationDefault{
		_statusCode: code,
	}
}

/* ApplicationServiceTerminateOperationDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ApplicationServiceTerminateOperationDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the application service terminate operation default response
func (o *ApplicationServiceTerminateOperationDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this application service terminate operation default response has a 2xx status code
func (o *ApplicationServiceTerminateOperationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this application service terminate operation default response has a 3xx status code
func (o *ApplicationServiceTerminateOperationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this application service terminate operation default response has a 4xx status code
func (o *ApplicationServiceTerminateOperationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this application service terminate operation default response has a 5xx status code
func (o *ApplicationServiceTerminateOperationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this application service terminate operation default response a status code equal to that given
func (o *ApplicationServiceTerminateOperationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ApplicationServiceTerminateOperationDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/applications/{name}/operation][%d] ApplicationService_TerminateOperation default  %+v", o._statusCode, o.Payload)
}

func (o *ApplicationServiceTerminateOperationDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/applications/{name}/operation][%d] ApplicationService_TerminateOperation default  %+v", o._statusCode, o.Payload)
}

func (o *ApplicationServiceTerminateOperationDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *ApplicationServiceTerminateOperationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
