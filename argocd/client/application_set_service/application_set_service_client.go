// Code generated by go-swagger; DO NOT EDIT.

package application_set_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application set service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application set service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplicationSetServiceCreate(params *ApplicationSetServiceCreateParams, opts ...ClientOption) (*ApplicationSetServiceCreateOK, error)

	ApplicationSetServiceDelete(params *ApplicationSetServiceDeleteParams, opts ...ClientOption) (*ApplicationSetServiceDeleteOK, error)

	ApplicationSetServiceGet(params *ApplicationSetServiceGetParams, opts ...ClientOption) (*ApplicationSetServiceGetOK, error)

	ApplicationSetServiceList(params *ApplicationSetServiceListParams, opts ...ClientOption) (*ApplicationSetServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ApplicationSetServiceCreate creates creates an applicationset
*/
func (a *Client) ApplicationSetServiceCreate(params *ApplicationSetServiceCreateParams, opts ...ClientOption) (*ApplicationSetServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationSetServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplicationSetService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/applicationsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationSetServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationSetServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationSetServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ApplicationSetServiceDelete deletes deletes an application set
*/
func (a *Client) ApplicationSetServiceDelete(params *ApplicationSetServiceDeleteParams, opts ...ClientOption) (*ApplicationSetServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationSetServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplicationSetService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/applicationsets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationSetServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationSetServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationSetServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ApplicationSetServiceGet gets returns an applicationset by name
*/
func (a *Client) ApplicationSetServiceGet(params *ApplicationSetServiceGetParams, opts ...ClientOption) (*ApplicationSetServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationSetServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplicationSetService_Get",
		Method:             "GET",
		PathPattern:        "/api/v1/applicationsets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationSetServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationSetServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationSetServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ApplicationSetServiceList lists returns list of applicationset
*/
func (a *Client) ApplicationSetServiceList(params *ApplicationSetServiceListParams, opts ...ClientOption) (*ApplicationSetServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationSetServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplicationSetService_List",
		Method:             "GET",
		PathPattern:        "/api/v1/applicationsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplicationSetServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationSetServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplicationSetServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
