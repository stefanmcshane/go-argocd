// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1SCMProviderGeneratorGithub SCMProviderGeneratorGithub defines connection info specific to GitHub.
//
// swagger:model v1alpha1SCMProviderGeneratorGithub
type V1alpha1SCMProviderGeneratorGithub struct {

	// Scan all branches instead of just the default branch.
	AllBranches bool `json:"allBranches,omitempty"`

	// The GitHub API URL to talk to. If blank, use https://api.github.com/.
	API string `json:"api,omitempty"`

	// AppSecretName is a reference to a GitHub App repo-creds secret.
	AppSecretName string `json:"appSecretName,omitempty"`

	// GitHub org to scan. Required.
	Organization string `json:"organization,omitempty"`

	// token ref
	TokenRef *V1alpha1SecretRef `json:"tokenRef,omitempty"`
}

// Validate validates this v1alpha1 s c m provider generator github
func (m *V1alpha1SCMProviderGeneratorGithub) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTokenRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1SCMProviderGeneratorGithub) validateTokenRef(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenRef) { // not required
		return nil
	}

	if m.TokenRef != nil {
		if err := m.TokenRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 s c m provider generator github based on the context it is used
func (m *V1alpha1SCMProviderGeneratorGithub) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTokenRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1SCMProviderGeneratorGithub) contextValidateTokenRef(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenRef != nil {
		if err := m.TokenRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1SCMProviderGeneratorGithub) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1SCMProviderGeneratorGithub) UnmarshalBinary(b []byte) error {
	var res V1alpha1SCMProviderGeneratorGithub
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
