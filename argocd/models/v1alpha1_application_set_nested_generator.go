// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ApplicationSetNestedGenerator ApplicationSetNestedGenerator represents a generator nested within a combination-type generator (MatrixGenerator or
// MergeGenerator).
//
// swagger:model v1alpha1ApplicationSetNestedGenerator
type V1alpha1ApplicationSetNestedGenerator struct {

	// cluster decision resource
	ClusterDecisionResource *V1alpha1DuckTypeGenerator `json:"clusterDecisionResource,omitempty"`

	// clusters
	Clusters *V1alpha1ClusterGenerator `json:"clusters,omitempty"`

	// git
	Git *V1alpha1GitGenerator `json:"git,omitempty"`

	// list
	List *V1alpha1ListGenerator `json:"list,omitempty"`

	// matrix
	Matrix *V1JSON `json:"matrix,omitempty"`

	// merge
	Merge *V1JSON `json:"merge,omitempty"`

	// pull request
	PullRequest *V1alpha1PullRequestGenerator `json:"pullRequest,omitempty"`

	// scm provider
	ScmProvider *V1alpha1SCMProviderGenerator `json:"scmProvider,omitempty"`

	// selector
	Selector *V1LabelSelector `json:"selector,omitempty"`
}

// Validate validates this v1alpha1 application set nested generator
func (m *V1alpha1ApplicationSetNestedGenerator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterDecisionResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatrix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScmProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateClusterDecisionResource(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterDecisionResource) { // not required
		return nil
	}

	if m.ClusterDecisionResource != nil {
		if err := m.ClusterDecisionResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterDecisionResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterDecisionResource")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateGit(formats strfmt.Registry) error {
	if swag.IsZero(m.Git) { // not required
		return nil
	}

	if m.Git != nil {
		if err := m.Git.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateMatrix(formats strfmt.Registry) error {
	if swag.IsZero(m.Matrix) { // not required
		return nil
	}

	if m.Matrix != nil {
		if err := m.Matrix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateMerge(formats strfmt.Registry) error {
	if swag.IsZero(m.Merge) { // not required
		return nil
	}

	if m.Merge != nil {
		if err := m.Merge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merge")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validatePullRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.PullRequest) { // not required
		return nil
	}

	if m.PullRequest != nil {
		if err := m.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pullRequest")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateScmProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.ScmProvider) { // not required
		return nil
	}

	if m.ScmProvider != nil {
		if err := m.ScmProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scmProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scmProvider")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) validateSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if m.Selector != nil {
		if err := m.Selector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 application set nested generator based on the context it is used
func (m *V1alpha1ApplicationSetNestedGenerator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterDecisionResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatrix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePullRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScmProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateClusterDecisionResource(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterDecisionResource != nil {
		if err := m.ClusterDecisionResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterDecisionResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterDecisionResource")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateGit(ctx context.Context, formats strfmt.Registry) error {

	if m.Git != nil {
		if err := m.Git.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	if m.List != nil {
		if err := m.List.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateMatrix(ctx context.Context, formats strfmt.Registry) error {

	if m.Matrix != nil {
		if err := m.Matrix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateMerge(ctx context.Context, formats strfmt.Registry) error {

	if m.Merge != nil {
		if err := m.Merge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merge")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidatePullRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.PullRequest != nil {
		if err := m.PullRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pullRequest")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateScmProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.ScmProvider != nil {
		if err := m.ScmProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scmProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scmProvider")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSetNestedGenerator) contextValidateSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.Selector != nil {
		if err := m.Selector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ApplicationSetNestedGenerator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ApplicationSetNestedGenerator) UnmarshalBinary(b []byte) error {
	var res V1alpha1ApplicationSetNestedGenerator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
