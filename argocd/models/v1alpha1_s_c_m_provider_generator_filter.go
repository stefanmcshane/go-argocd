// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1SCMProviderGeneratorFilter SCMProviderGeneratorFilter is a single repository filter.
// If multiple filter types are set on a single struct, they will be AND'd together. All filters must
// pass for a repo to be included.
//
// swagger:model v1alpha1SCMProviderGeneratorFilter
type V1alpha1SCMProviderGeneratorFilter struct {

	// A regex which must match the branch name.
	BranchMatch string `json:"branchMatch,omitempty"`

	// A regex which must match at least one label.
	LabelMatch string `json:"labelMatch,omitempty"`

	// An array of paths, all of which must not exist.
	PathsDoNotExist []string `json:"pathsDoNotExist"`

	// An array of paths, all of which must exist.
	PathsExist []string `json:"pathsExist"`

	// A regex for repo names.
	RepositoryMatch string `json:"repositoryMatch,omitempty"`
}

// Validate validates this v1alpha1 s c m provider generator filter
func (m *V1alpha1SCMProviderGeneratorFilter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1alpha1 s c m provider generator filter based on context it is used
func (m *V1alpha1SCMProviderGeneratorFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1SCMProviderGeneratorFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1SCMProviderGeneratorFilter) UnmarshalBinary(b []byte) error {
	var res V1alpha1SCMProviderGeneratorFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
